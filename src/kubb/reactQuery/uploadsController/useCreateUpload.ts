/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { CreateUploadMutationRequest, CreateUploadMutationResponse, CreateUploadQueryParams, CreateUpload400, CreateUpload404, CreateUpload413, CreateUpload415, CreateUpload500 } from "../../ts/CreateUpload.ts";
import { useMutation } from "@tanstack/react-query";

export const createUploadMutationKey = () => [{ url: '/uploads' }] as const

export type CreateUploadMutationKey = ReturnType<typeof createUploadMutationKey>

/**
 * @description createUpload
 * {@link /uploads}
 */
export async function createUpload(data: CreateUploadMutationRequest, params: CreateUploadQueryParams, config: Partial<RequestConfig<CreateUploadMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  const formData = new FormData()
  if (requestData) {
   Object.keys(requestData).forEach((key) => {
     const value = requestData[key as keyof typeof requestData];
     if (typeof value === 'string' || (value as unknown) instanceof Blob) {
       formData.append(key, value as unknown as string | Blob);
     }
   })
  }  
  const res = await request<CreateUploadMutationResponse, ResponseErrorConfig<CreateUpload400 | CreateUpload404 | CreateUpload413 | CreateUpload415 | CreateUpload500>, CreateUploadMutationRequest>({ method : "POST", url : `/uploads`, params, data : formData, ... requestConfig, headers : { 'Content-Type': 'multipart/form-data', ...requestConfig.headers } })  
  return res.data
}

/**
 * @description createUpload
 * {@link /uploads}
 */
export function useCreateUpload<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateUploadMutationResponse, ResponseErrorConfig<CreateUpload400 | CreateUpload404 | CreateUpload413 | CreateUpload415 | CreateUpload500>, {data: CreateUploadMutationRequest, params: CreateUploadQueryParams}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateUploadMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createUploadMutationKey()

  return useMutation<CreateUploadMutationResponse, ResponseErrorConfig<CreateUpload400 | CreateUpload404 | CreateUpload413 | CreateUpload415 | CreateUpload500>, {data: CreateUploadMutationRequest, params: CreateUploadQueryParams}, TContext>({
    mutationFn: async({ data, params }) => {
      return createUpload(data, params, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}