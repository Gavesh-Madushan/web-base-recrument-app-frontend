/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import type { FetchUploadQueryResponse, FetchUploadPathParams, FetchUpload400, FetchUpload404, FetchUpload500 } from "../../ts/FetchUpload.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const fetchUploadSuspenseQueryKey = (staticPath: FetchUploadPathParams["staticPath"]) => [{ url: '/uploads/:staticPath', params: {staticPath:staticPath} }] as const

export type FetchUploadSuspenseQueryKey = ReturnType<typeof fetchUploadSuspenseQueryKey>

/**
 * @description fetchUpload
 * {@link /uploads/:staticPath}
 */
export async function fetchUploadSuspense(staticPath: FetchUploadPathParams["staticPath"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, unknown>({ method : "GET", url : `/uploads/${staticPath}`, ... requestConfig })  
  return res.data
}

export function fetchUploadSuspenseQueryOptions(staticPath: FetchUploadPathParams["staticPath"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = fetchUploadSuspenseQueryKey(staticPath)
  return queryOptions<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, FetchUploadQueryResponse, typeof queryKey>({
   enabled: !!(staticPath),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return fetchUploadSuspense(staticPath, config)
   },
  })
}

/**
 * @description fetchUpload
 * {@link /uploads/:staticPath}
 */
export function useFetchUploadSuspense<TData = FetchUploadQueryResponse, TQueryKey extends QueryKey = FetchUploadSuspenseQueryKey>(staticPath: FetchUploadPathParams["staticPath"], options: 
{
  query?: Partial<UseSuspenseQueryOptions<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? fetchUploadSuspenseQueryKey(staticPath)

  const query = useSuspenseQuery({
   ...fetchUploadSuspenseQueryOptions(staticPath, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}