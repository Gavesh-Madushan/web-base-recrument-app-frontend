/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import type { FetchUploadQueryResponse, FetchUploadPathParams, FetchUpload400, FetchUpload404, FetchUpload500 } from "../../ts/FetchUpload.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const fetchUploadQueryKey = (staticPath: FetchUploadPathParams["staticPath"]) => [{ url: '/uploads/:staticPath', params: {staticPath:staticPath} }] as const

export type FetchUploadQueryKey = ReturnType<typeof fetchUploadQueryKey>

/**
 * @description fetchUpload
 * {@link /uploads/:staticPath}
 */
export async function fetchUpload(staticPath: FetchUploadPathParams["staticPath"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, unknown>({ method : "GET", url : `/uploads/${staticPath}`, ... requestConfig })  
  return res.data
}

export function fetchUploadQueryOptions(staticPath: FetchUploadPathParams["staticPath"], config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = fetchUploadQueryKey(staticPath)
  return queryOptions<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, FetchUploadQueryResponse, typeof queryKey>({
   enabled: !!(staticPath),
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return fetchUpload(staticPath, config)
   },
  })
}

/**
 * @description fetchUpload
 * {@link /uploads/:staticPath}
 */
export function useFetchUpload<TData = FetchUploadQueryResponse, TQueryData = FetchUploadQueryResponse, TQueryKey extends QueryKey = FetchUploadQueryKey>(staticPath: FetchUploadPathParams["staticPath"], options: 
{
  query?: Partial<QueryObserverOptions<FetchUploadQueryResponse, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? fetchUploadQueryKey(staticPath)

  const query = useQuery({
   ...fetchUploadQueryOptions(staticPath, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<FetchUpload400 | FetchUpload404 | FetchUpload500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}