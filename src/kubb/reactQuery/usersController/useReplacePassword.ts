/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { ReplacePasswordMutationRequest, ReplacePasswordMutationResponse, ReplacePasswordPathParams } from "../../ts/ReplacePassword.ts";
import { useMutation } from "@tanstack/react-query";

export const replacePasswordMutationKey = () => [{ url: '/users/:id/password' }] as const

export type ReplacePasswordMutationKey = ReturnType<typeof replacePasswordMutationKey>

/**
 * @description replacePassword
 * {@link /users/:id/password}
 */
export async function replacePassword(id: ReplacePasswordPathParams["id"], data: ReplacePasswordMutationRequest, config: Partial<RequestConfig<ReplacePasswordMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ReplacePasswordMutationResponse, ResponseErrorConfig<Error>, ReplacePasswordMutationRequest>({ method : "PUT", url : `/users/${id}/password`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description replacePassword
 * {@link /users/:id/password}
 */
export function useReplacePassword<TContext>(options: 
{
  mutation?: UseMutationOptions<ReplacePasswordMutationResponse, ResponseErrorConfig<Error>, {id: ReplacePasswordPathParams["id"], data: ReplacePasswordMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ReplacePasswordMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? replacePasswordMutationKey()

  return useMutation<ReplacePasswordMutationResponse, ResponseErrorConfig<Error>, {id: ReplacePasswordPathParams["id"], data: ReplacePasswordMutationRequest}, TContext>({
    mutationFn: async({ id, data }) => {
      return replacePassword(id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}