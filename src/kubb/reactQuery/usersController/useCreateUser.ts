/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { CreateUserMutationRequest, CreateUserMutationResponse, CreateUser400, CreateUser404, CreateUser409, CreateUser500 } from "../../ts/CreateUser.ts";
import { useMutation } from "@tanstack/react-query";

export const createUserMutationKey = () => [{ url: '/users' }] as const

export type CreateUserMutationKey = ReturnType<typeof createUserMutationKey>

/**
 * @description createUser
 * {@link /users}
 */
export async function createUser(data: CreateUserMutationRequest, config: Partial<RequestConfig<CreateUserMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<CreateUserMutationResponse, ResponseErrorConfig<CreateUser400 | CreateUser404 | CreateUser409 | CreateUser500>, CreateUserMutationRequest>({ method : "POST", url : `/users`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description createUser
 * {@link /users}
 */
export function useCreateUser<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateUserMutationResponse, ResponseErrorConfig<CreateUser400 | CreateUser404 | CreateUser409 | CreateUser500>, {data: CreateUserMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateUserMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createUserMutationKey()

  return useMutation<CreateUserMutationResponse, ResponseErrorConfig<CreateUser400 | CreateUser404 | CreateUser409 | CreateUser500>, {data: CreateUserMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return createUser(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}