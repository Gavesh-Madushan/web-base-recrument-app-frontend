/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import type { ListJobPostingsQueryResponse, ListJobPostingsQueryParams } from "../../ts/ListJobPostings.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const listJobPostingsSuspenseQueryKey = (params?: ListJobPostingsQueryParams) => [{ url: '/jobPostings' }, ...(params ? [params] : [])] as const

export type ListJobPostingsSuspenseQueryKey = ReturnType<typeof listJobPostingsSuspenseQueryKey>

/**
 * @description listJobPostings
 * {@link /jobPostings}
 */
export async function listJobPostingsSuspense(params?: ListJobPostingsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ListJobPostingsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/jobPostings`, params, ... requestConfig })  
  return res.data
}

export function listJobPostingsSuspenseQueryOptions(params?: ListJobPostingsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listJobPostingsSuspenseQueryKey(params)
  return queryOptions<ListJobPostingsQueryResponse, ResponseErrorConfig<Error>, ListJobPostingsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listJobPostingsSuspense(params, config)
   },
  })
}

/**
 * @description listJobPostings
 * {@link /jobPostings}
 */
export function useListJobPostingsSuspense<TData = ListJobPostingsQueryResponse, TQueryKey extends QueryKey = ListJobPostingsSuspenseQueryKey>(params?: ListJobPostingsQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ListJobPostingsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listJobPostingsSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...listJobPostingsSuspenseQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}