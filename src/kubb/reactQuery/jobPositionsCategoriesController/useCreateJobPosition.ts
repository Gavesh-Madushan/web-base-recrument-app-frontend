/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { CreateJobPositionMutationRequest, CreateJobPositionMutationResponse, CreateJobPosition400, CreateJobPosition404, CreateJobPosition500 } from "../../ts/CreateJobPosition.ts";
import { useMutation } from "@tanstack/react-query";

export const createJobPositionMutationKey = () => [{ url: '/jobPositions' }] as const

export type CreateJobPositionMutationKey = ReturnType<typeof createJobPositionMutationKey>

/**
 * @description createJobPosition
 * {@link /jobPositions}
 */
export async function createJobPosition(data: CreateJobPositionMutationRequest, config: Partial<RequestConfig<CreateJobPositionMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<CreateJobPositionMutationResponse, ResponseErrorConfig<CreateJobPosition400 | CreateJobPosition404 | CreateJobPosition500>, CreateJobPositionMutationRequest>({ method : "POST", url : `/jobPositions`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description createJobPosition
 * {@link /jobPositions}
 */
export function useCreateJobPosition<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateJobPositionMutationResponse, ResponseErrorConfig<CreateJobPosition400 | CreateJobPosition404 | CreateJobPosition500>, {data: CreateJobPositionMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateJobPositionMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createJobPositionMutationKey()

  return useMutation<CreateJobPositionMutationResponse, ResponseErrorConfig<CreateJobPosition400 | CreateJobPosition404 | CreateJobPosition500>, {data: CreateJobPositionMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return createJobPosition(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}