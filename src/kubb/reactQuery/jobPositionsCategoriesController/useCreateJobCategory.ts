/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { CreateJobCategoryMutationRequest, CreateJobCategoryMutationResponse, CreateJobCategory400, CreateJobCategory404, CreateJobCategory500 } from "../../ts/CreateJobCategory.ts";
import { useMutation } from "@tanstack/react-query";

export const createJobCategoryMutationKey = () => [{ url: '/jobCategories' }] as const

export type CreateJobCategoryMutationKey = ReturnType<typeof createJobCategoryMutationKey>

/**
 * @description createJobCategory
 * {@link /jobCategories}
 */
export async function createJobCategory(data: CreateJobCategoryMutationRequest, config: Partial<RequestConfig<CreateJobCategoryMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<CreateJobCategoryMutationResponse, ResponseErrorConfig<CreateJobCategory400 | CreateJobCategory404 | CreateJobCategory500>, CreateJobCategoryMutationRequest>({ method : "POST", url : `/jobCategories`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description createJobCategory
 * {@link /jobCategories}
 */
export function useCreateJobCategory<TContext>(options: 
{
  mutation?: UseMutationOptions<CreateJobCategoryMutationResponse, ResponseErrorConfig<CreateJobCategory400 | CreateJobCategory404 | CreateJobCategory500>, {data: CreateJobCategoryMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<CreateJobCategoryMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? createJobCategoryMutationKey()

  return useMutation<CreateJobCategoryMutationResponse, ResponseErrorConfig<CreateJobCategory400 | CreateJobCategory404 | CreateJobCategory500>, {data: CreateJobCategoryMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return createJobCategory(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}