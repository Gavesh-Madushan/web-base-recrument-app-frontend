/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import type { ListJobCategoriesQueryResponse, ListJobCategoriesQueryParams, ListJobCategories400, ListJobCategories404, ListJobCategories500 } from "../../ts/ListJobCategories.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const listJobCategoriesQueryKey = (params?: ListJobCategoriesQueryParams) => [{ url: '/jobCategories' }, ...(params ? [params] : [])] as const

export type ListJobCategoriesQueryKey = ReturnType<typeof listJobCategoriesQueryKey>

/**
 * @description listJobCategories
 * {@link /jobCategories}
 */
export async function listJobCategories(params?: ListJobCategoriesQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ListJobCategoriesQueryResponse, ResponseErrorConfig<ListJobCategories400 | ListJobCategories404 | ListJobCategories500>, unknown>({ method : "GET", url : `/jobCategories`, params, ... requestConfig })  
  return res.data
}

export function listJobCategoriesQueryOptions(params?: ListJobCategoriesQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listJobCategoriesQueryKey(params)
  return queryOptions<ListJobCategoriesQueryResponse, ResponseErrorConfig<ListJobCategories400 | ListJobCategories404 | ListJobCategories500>, ListJobCategoriesQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listJobCategories(params, config)
   },
  })
}

/**
 * @description listJobCategories
 * {@link /jobCategories}
 */
export function useListJobCategories<TData = ListJobCategoriesQueryResponse, TQueryData = ListJobCategoriesQueryResponse, TQueryKey extends QueryKey = ListJobCategoriesQueryKey>(params?: ListJobCategoriesQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<ListJobCategoriesQueryResponse, ResponseErrorConfig<ListJobCategories400 | ListJobCategories404 | ListJobCategories500>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listJobCategoriesQueryKey(params)

  const query = useQuery({
   ...listJobCategoriesQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ListJobCategories400 | ListJobCategories404 | ListJobCategories500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}