/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import type { ListJobPositionsQueryResponse, ListJobPositionsQueryParams, ListJobPositions400, ListJobPositions404, ListJobPositions500 } from "../../ts/ListJobPositions.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const listJobPositionsQueryKey = (params?: ListJobPositionsQueryParams) => [{ url: '/jobPositions' }, ...(params ? [params] : [])] as const

export type ListJobPositionsQueryKey = ReturnType<typeof listJobPositionsQueryKey>

/**
 * @description listJobPositions
 * {@link /jobPositions}
 */
export async function listJobPositions(params?: ListJobPositionsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ListJobPositionsQueryResponse, ResponseErrorConfig<ListJobPositions400 | ListJobPositions404 | ListJobPositions500>, unknown>({ method : "GET", url : `/jobPositions`, params, ... requestConfig })  
  return res.data
}

export function listJobPositionsQueryOptions(params?: ListJobPositionsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listJobPositionsQueryKey(params)
  return queryOptions<ListJobPositionsQueryResponse, ResponseErrorConfig<ListJobPositions400 | ListJobPositions404 | ListJobPositions500>, ListJobPositionsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listJobPositions(params, config)
   },
  })
}

/**
 * @description listJobPositions
 * {@link /jobPositions}
 */
export function useListJobPositions<TData = ListJobPositionsQueryResponse, TQueryData = ListJobPositionsQueryResponse, TQueryKey extends QueryKey = ListJobPositionsQueryKey>(params?: ListJobPositionsQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<ListJobPositionsQueryResponse, ResponseErrorConfig<ListJobPositions400 | ListJobPositions404 | ListJobPositions500>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listJobPositionsQueryKey(params)

  const query = useQuery({
   ...listJobPositionsQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<ListJobPositions400 | ListJobPositions404 | ListJobPositions500>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}