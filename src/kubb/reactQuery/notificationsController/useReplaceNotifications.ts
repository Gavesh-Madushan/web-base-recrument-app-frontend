/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { ReplaceNotificationsMutationRequest, ReplaceNotificationsMutationResponse } from "../../ts/ReplaceNotifications.ts";
import { useMutation } from "@tanstack/react-query";

export const replaceNotificationsMutationKey = () => [{ url: '/notifications' }] as const

export type ReplaceNotificationsMutationKey = ReturnType<typeof replaceNotificationsMutationKey>

/**
 * @description replaceNotifications
 * {@link /notifications}
 */
export async function replaceNotifications(data: ReplaceNotificationsMutationRequest, config: Partial<RequestConfig<ReplaceNotificationsMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ReplaceNotificationsMutationResponse, ResponseErrorConfig<Error>, ReplaceNotificationsMutationRequest>({ method : "PUT", url : `/notifications`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description replaceNotifications
 * {@link /notifications}
 */
export function useReplaceNotifications<TContext>(options: 
{
  mutation?: UseMutationOptions<ReplaceNotificationsMutationResponse, ResponseErrorConfig<Error>, {data: ReplaceNotificationsMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ReplaceNotificationsMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? replaceNotificationsMutationKey()

  return useMutation<ReplaceNotificationsMutationResponse, ResponseErrorConfig<Error>, {data: ReplaceNotificationsMutationRequest}, TContext>({
    mutationFn: async({ data }) => {
      return replaceNotifications(data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}