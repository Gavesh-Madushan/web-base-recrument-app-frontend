/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, QueryObserverOptions, UseQueryResult } from "@tanstack/react-query";
import type { ListNotificationsQueryResponse, ListNotificationsQueryParams } from "../../ts/ListNotifications.ts";
import { queryOptions, useQuery } from "@tanstack/react-query";

export const listNotificationsQueryKey = (params?: ListNotificationsQueryParams) => [{ url: '/notifications' }, ...(params ? [params] : [])] as const

export type ListNotificationsQueryKey = ReturnType<typeof listNotificationsQueryKey>

/**
 * @description listNotifications
 * {@link /notifications}
 */
export async function listNotifications(params?: ListNotificationsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ListNotificationsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/notifications`, params, ... requestConfig })  
  return res.data
}

export function listNotificationsQueryOptions(params?: ListNotificationsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listNotificationsQueryKey(params)
  return queryOptions<ListNotificationsQueryResponse, ResponseErrorConfig<Error>, ListNotificationsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listNotifications(params, config)
   },
  })
}

/**
 * @description listNotifications
 * {@link /notifications}
 */
export function useListNotifications<TData = ListNotificationsQueryResponse, TQueryData = ListNotificationsQueryResponse, TQueryKey extends QueryKey = ListNotificationsQueryKey>(params?: ListNotificationsQueryParams, options: 
{
  query?: Partial<QueryObserverOptions<ListNotificationsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listNotificationsQueryKey(params)

  const query = useQuery({
   ...listNotificationsQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as QueryObserverOptions, queryClient) as UseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}