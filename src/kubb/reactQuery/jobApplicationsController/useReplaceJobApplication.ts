/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { UseMutationOptions, QueryClient } from "@tanstack/react-query";
import type { ReplaceJobApplicationMutationRequest, ReplaceJobApplicationMutationResponse, ReplaceJobApplicationPathParams } from "../../ts/ReplaceJobApplication.ts";
import { useMutation } from "@tanstack/react-query";

export const replaceJobApplicationMutationKey = () => [{ url: '/jobApplications/:id' }] as const

export type ReplaceJobApplicationMutationKey = ReturnType<typeof replaceJobApplicationMutationKey>

/**
 * @description replaceJobApplication
 * {@link /jobApplications/:id}
 */
export async function replaceJobApplication(id: ReplaceJobApplicationPathParams["id"], data: ReplaceJobApplicationMutationRequest, config: Partial<RequestConfig<ReplaceJobApplicationMutationRequest>> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const requestData = data  
  
  const res = await request<ReplaceJobApplicationMutationResponse, ResponseErrorConfig<Error>, ReplaceJobApplicationMutationRequest>({ method : "PUT", url : `/jobApplications/${id}`, data : requestData, ... requestConfig })  
  return res.data
}

/**
 * @description replaceJobApplication
 * {@link /jobApplications/:id}
 */
export function useReplaceJobApplication<TContext>(options: 
{
  mutation?: UseMutationOptions<ReplaceJobApplicationMutationResponse, ResponseErrorConfig<Error>, {id: ReplaceJobApplicationPathParams["id"], data: ReplaceJobApplicationMutationRequest}, TContext> & { client?: QueryClient },
  client?: Partial<RequestConfig<ReplaceJobApplicationMutationRequest>> & { client?: typeof fetch },
}
 = {}) {
  const { mutation = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...mutationOptions } = mutation;
  const mutationKey = mutationOptions.mutationKey ?? replaceJobApplicationMutationKey()

  return useMutation<ReplaceJobApplicationMutationResponse, ResponseErrorConfig<Error>, {id: ReplaceJobApplicationPathParams["id"], data: ReplaceJobApplicationMutationRequest}, TContext>({
    mutationFn: async({ id, data }) => {
      return replaceJobApplication(id, data, config)
    },
    mutationKey,
    ...mutationOptions
  }, queryClient)
}