/**
* Generated by Kubb (https://kubb.dev/).
* Do not edit manually.
*/

import fetch from "@kubb/plugin-client/clients/axios";
import type { RequestConfig, ResponseErrorConfig } from "@kubb/plugin-client/clients/axios";
import type { QueryKey, QueryClient, UseSuspenseQueryOptions, UseSuspenseQueryResult } from "@tanstack/react-query";
import type { ListJobApplicationsQueryResponse, ListJobApplicationsQueryParams } from "../../ts/ListJobApplications.ts";
import { queryOptions, useSuspenseQuery } from "@tanstack/react-query";

export const listJobApplicationsSuspenseQueryKey = (params?: ListJobApplicationsQueryParams) => [{ url: '/jobApplications' }, ...(params ? [params] : [])] as const

export type ListJobApplicationsSuspenseQueryKey = ReturnType<typeof listJobApplicationsSuspenseQueryKey>

/**
 * @description listJobApplications
 * {@link /jobApplications}
 */
export async function listJobApplicationsSuspense(params?: ListJobApplicationsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const { client: request = fetch, ...requestConfig } = config  
  
  const res = await request<ListJobApplicationsQueryResponse, ResponseErrorConfig<Error>, unknown>({ method : "GET", url : `/jobApplications`, params, ... requestConfig })  
  return res.data
}

export function listJobApplicationsSuspenseQueryOptions(params?: ListJobApplicationsQueryParams, config: Partial<RequestConfig> & { client?: typeof fetch } = {}) {
  const queryKey = listJobApplicationsSuspenseQueryKey(params)
  return queryOptions<ListJobApplicationsQueryResponse, ResponseErrorConfig<Error>, ListJobApplicationsQueryResponse, typeof queryKey>({
 
   queryKey,
   queryFn: async ({ signal }) => {
      config.signal = signal
      return listJobApplicationsSuspense(params, config)
   },
  })
}

/**
 * @description listJobApplications
 * {@link /jobApplications}
 */
export function useListJobApplicationsSuspense<TData = ListJobApplicationsQueryResponse, TQueryKey extends QueryKey = ListJobApplicationsSuspenseQueryKey>(params?: ListJobApplicationsQueryParams, options: 
{
  query?: Partial<UseSuspenseQueryOptions<ListJobApplicationsQueryResponse, ResponseErrorConfig<Error>, TData, TQueryKey>> & { client?: QueryClient },
  client?: Partial<RequestConfig> & { client?: typeof fetch }
}
 = {}) {
  const { query: queryConfig = {}, client: config = {} } = options ?? {}
  const { client: queryClient, ...queryOptions } = queryConfig
  const queryKey = queryOptions?.queryKey ?? listJobApplicationsSuspenseQueryKey(params)

  const query = useSuspenseQuery({
   ...listJobApplicationsSuspenseQueryOptions(params, config),
   queryKey,
   ...queryOptions
  } as unknown as UseSuspenseQueryOptions, queryClient) as UseSuspenseQueryResult<TData, ResponseErrorConfig<Error>> & { queryKey: TQueryKey }

  query.queryKey = queryKey as TQueryKey

  return query
}